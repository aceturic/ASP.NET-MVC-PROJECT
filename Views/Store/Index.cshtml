@model X.PagedList.IPagedList<UsersApp.Models.Product>
@using X.PagedList.Mvc.Core
@{
    ViewData["Title"] = "Store";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var categories = (ViewBag.Categories as List<string>) ?? new List<string>();
    string selectedCategory = ViewBag.SelectedCategory as string;
    string searchString = ViewBag.SearchString as string;
    string priceSort = ViewBag.PriceSort as string;
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;700&display=swap" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.css" rel="stylesheet">

<h2 class="text-center my-5 fw-bold text-gradient">🛒 Store</h2>

<form method="get" id="filterForm" class="mb-4">
    <div class="row g-3 align-items-center justify-content-center">
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-text search-icon"><i class="fas fa-search"></i></span>
                <input type="text" name="searchString" id="searchInput" class="form-control search-input"
                       placeholder="Search for products..." value="@searchString" />
            </div>
        </div>
        <div class="col-md-3">
            <select name="category" id="categorySelect" class="form-select custom-select">
                <option value="">All Categories</option>
                @foreach (var cat in categories)
                {
                    <option value="@cat" selected="@(cat == selectedCategory ? "selected" : null)">@cat</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <select name="priceSort" id="priceSortSelect" class="form-select custom-select">
                <option value="">Sort by Price</option>
                <option value="asc" selected="@(priceSort == "asc" ? "selected" : null)">Low to High</option>
                <option value="desc" selected="@(priceSort == "desc" ? "selected" : null)">High to Low</option>
            </select>
        </div>
        <div class="col-md-2">
            <button type="submit" class="btn modern-btn">Search</button>
        </div>
    </div>
</form>

<div class="container">
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var product in Model)
        {
            var quantityClass = product.Quantity <= 20 ? "bg-danger" :
            product.Quantity <= 42 ? "bg-warning" :
            "bg-success";

            <div class="col" data-aos="fade-up" data-aos-delay="100">
                <div class="product-card">
                    @if (!string.IsNullOrEmpty(product.ImageFileName))
                    {
                        <img src="~/products/@product.ImageFileName" class="product-image" alt="@product.Name" />
                    }
                    else
                    {
                        <img src="~/images/placeholder.png" class="product-image" alt="No image available" />
                    }
                    <div class="product-info">
                        <h5 class="product-title">@product.Name</h5>
                        <p><strong>Brand:</strong> @product.Brand</p>
                        <p><strong>Category:</strong> @product.Category</p>
                        <p class="product-price">$@product.Price</p>
                        <p>
                            <strong>Quantity:</strong>
                            <span class="badge @quantityClass">@product.Quantity</span>
                        </p>
                        <button class="btn favorite-btn" id="favorite-btn-@product.Id" data-product-id="@product.Id">
                            <i class="fas fa-heart"></i> Add to Favorites
                        </button>
                        <div class="mt-auto">
                            <a asp-controller="ProductDetails" asp-action="Index" asp-route-id="@product.Id"
                               class="btn details-btn"><i class="fas fa-info-circle"></i> Details</a>
                            @if (product.Quantity > 0)
                            {
                                <a asp-controller="Order" asp-action="Checkout" asp-route-productId="@product.Id"
                                   class="btn buy-btn">
                                    <i class="fas fa-shopping-cart"></i> Buy Now
                                </a>
                            }
                            else
                            {
                                <button class="btn out-of-stock-btn" disabled>Out of Stock</button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="pagination-container mt-4">
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page }),
            new PagedListRenderOptions
    {
        UlElementClasses = new[] { "pagination" },
        LiElementClasses = new[] { "page-item" },
        PageClasses = new[] { "page-link" }
    })
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var form = document.getElementById('filterForm');
            var categorySelect = document.getElementById('categorySelect');
            var priceSortSelect = document.getElementById('priceSortSelect');
            categorySelect.addEventListener('change', function () {
                form.submit();
            });
            priceSortSelect.addEventListener('change', function () {
                form.submit();
            });
        });
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js"></script>
    <script>
        AOS.init({
            duration: 800,
            once: true,
        });
    </script>
}

<style>

    :root {
        --primary: #00c8ff;
        --bg-dark: #121212;
        --bg-light: #f8f9fa;
        --card-bg-dark: rgba(255, 255, 255, 0.1);
        --card-bg-light: #ffffff;
        --glass-bg-dark: rgba(255, 255, 255, 0.15);
        --glass-bg-light: rgba(0, 0, 0, 0.05);
        --text-light: #f8f9fa;
        --text-dark: #333333;
        --border-dark: rgba(255, 255, 255, 0.2);
        --border-light: rgba(0, 0, 0, 0.1);
    }

    body {
        font-family: 'Poppins', sans-serif;
        transition: all 0.3s ease-in-out;
    }
        body:not(.dark-mode) {
            background: var(--bg-light);
            color: var(--text-dark);
        }
        body.dark-mode {
            background: var(--bg-dark);
            color: var(--text-light);
        }

    .text-gradient {
        background: linear-gradient(to right, #00c8ff, #ff00ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .search-icon {
        background: var(--primary);
        color: white;
        border-radius: 30px 0 0 30px;
    }

    .search-input {
        border-radius: 30px;
        padding: 10px;
    }

    .custom-select {
        border-radius: 20px;
        padding: 8px;
    }

    .btn {
        border-radius: 30px;
        transition: all 0.3s ease-in-out;
    }

    .modern-btn {
        background: var(--primary);
        color: white;
        border: none;
    }

        .modern-btn:hover {
            background: #0088cc;
        }

    .product-card {
        border-radius: 20px;
        padding: 20px;
        backdrop-filter: blur(10px);
        transition: transform 0.3s, box-shadow 0.3s;
    }

    body.dark-mode .product-card {
        background: var(--glass-bg-dark);
        box-shadow: 0 10px 30px var(--border-dark);
    }

    body:not(.dark-mode) .product-card {
        background: var(--glass-bg-light);
        box-shadow: 0 10px 30px var(--border-light);
    }

    .product-card:hover {
        transform: translateY(-5px);
    }

    .product-image {
        width: 100%;
        border-radius: 15px;
        object-fit: cover;
        height: 200px;
    }

    .product-price {
        font-size: 1.4rem;
        font-weight: bold;
        color: var(--primary);
    }

    .favorite-btn {
        background: transparent;
        border: 2px solid var(--primary);
        color: var(--primary);
    }

        .favorite-btn:hover {
            background: var(--primary);
            color: white;
        }

    .details-btn {
        background: none;
        border: 2px solid var(--primary);
        color: var(--primary);
    }

        .details-btn:hover {
            background: var(--primary);
            color: white;
        }

    .buy-btn {
        background: var(--primary);
        color: white;
    }

        .buy-btn:hover {
            background: #0088cc;
        }

    .out-of-stock-btn {
        background: gray;
        color: white;
        cursor: not-allowed;
    }

    .bg-danger {
        background-color: #dc3545 !important;
    }

    .bg-warning {
        background-color: #ffc107 !important;
        color: black !important;
    }

    .bg-success {
        background-color: #28a745 !important;
    }

    .pagination-container {
        display: flex;
        justify-content: center;
    }

    .pagination .page-link {
        border-radius: 10px;
        transition: all 0.3s ease-in-out;
    }

    body.dark-mode .pagination .page-link {
        background: var(--glass-bg-dark);
        color: var(--primary);
    }

    body:not(.dark-mode) .pagination .page-link {
        background: var(--glass-bg-light);
        color: var(--primary);
    }

    .pagination .page-link:hover {
        background: var(--primary);
        color: white;
    }

    .pagination .active .page-link {
        background: var(--primary) !important;
        color: white !important;
        font-weight: bold !important;
    }
</style>

<script>

    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll(".favorite-btn").forEach(button => {
            let productId = button.getAttribute("data-product-id");

            fetch(`/Favorites/IsFavorite/${productId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.isFavorite) {
                        button.innerHTML = '<i class="fas fa-heart"></i> Already Added';
                        button.classList.add("btn-success");
                        button.classList.remove("btn-outline-danger");
                    } else {
                        button.innerHTML = '<i class="fas fa-heart"></i> Add to Favorites';
                        button.classList.add("btn-outline-danger");
                    }
                });

            button.addEventListener("click", function () {
                fetch(`/Favorites/AddToFavorites`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ productId: parseInt(productId) })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        button.innerHTML = '<i class="fas fa-heart"></i> Already Added';
                        button.classList.add("btn-success");
                        button.classList.remove("btn-outline-danger");

                        let toast = new bootstrap.Toast(document.getElementById('toast-notification'));
                        toast.show();
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error("Error:", error));
            });
        });
    });

    document.addEventListener("scroll", function () {
        document.querySelectorAll(".card").forEach((card) => {
            if (card.getBoundingClientRect().top < window.innerHeight - 100) {
                card.classList.add("visible");
            }
        });
    });

    document.getElementById('searchInput').addEventListener('input', function () {
        let searchQuery = this.value.toLowerCase();
        document.querySelectorAll('.card').forEach(card => {
            let productName = card.querySelector('.card-title').textContent.toLowerCase();
            card.style.display = productName.includes(searchQuery) ? 'block' : 'none';
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll(".add-to-cart-btn").forEach(button => {
            button.addEventListener("click", function () {
                let productId = this.getAttribute("data-product-id");
                let productName = this.getAttribute("data-product-name");
                let productPrice = this.getAttribute("data-product-price");
                let productImage = this.getAttribute("data-product-image");

                fetch(`/Cart/AddToCart`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        productId: parseInt(productId),
                        name: productName,
                        price: parseFloat(productPrice),
                        imageFileName: productImage
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        let toast = new bootstrap.Toast(document.getElementById('cart-toast-notification'));
                        toast.show();
                    } else {
                        alert(data.message);
                    }
                })
                .catch(error => console.error("Error:", error));
            });
        });
    });
</script>
